import { Telegraf } from 'telegraf';
import { Command } from '../classes/command.class';
import { MyContext } from '../interfaces/context.interface';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { Telegram } from '../entities/telegram.entity';

export class LeaderboardCommand extends Command {
  constructor(
    client: Telegraf<MyContext>,
    @InjectRepository(Telegram)
    private readonly telegramRepository: Repository<Telegram>,
  ) {
    super(client);
  }

  async handle(): Promise<void> {
    this.client.action('leaderboard', async (ctx: MyContext) => {
      await this.handled(ctx);
    });
    this.client.command('leaderboard', async (ctx: MyContext) => {
      await this.handled(ctx);
    });
  }

  async handled(ctx: MyContext): Promise<void> {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ point_balance –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è
    const users = await this.telegramRepository.find({
      order: { point_balance: 'DESC' },
      take: 10, // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    });

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤
    let leaderboardText = 'üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ üèÜ\n\n';

    users.forEach((user, index) => {
      leaderboardText += `<b>${index + 1}. ${user.username || user.name}</b> - <u>${user.point_balance} –±–∞–ª–ª–æ–≤</u>\n`;
    });

    leaderboardText += '------------------------------\n';

    const currentUserId = ctx.message.chat.id; // –ü–æ–ª—É—á–∞–µ–º chat_id —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const currentUser = await this.telegramRepository.findOne({
      where: { chat_id: currentUserId.toString() },
    });
    if (currentUser) {
      const position = users.findIndex(
        (user) => user.chat_id === currentUserId.toString(),
      );
      if (position !== -1) {
        leaderboardText += `–í–∞—à–µ –º–µ—Å—Ç–æ: ${position + 1}\n`;
      }
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–±–ª–∏—Ü–µ–π –ª–∏–¥–µ—Ä–æ–≤
    await ctx.replyWithHTML(leaderboardText, {
      reply_markup: {
        inline_keyboard: [
          [{ text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'menu' }],
        ],
      },
    });
  }
}
